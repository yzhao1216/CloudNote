<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-lazy-init="true">

	<description>Spring公共配置</description>

	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.tarena.bigdata.cloudnote">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.tarena.bigdata.cloudnote.entity" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tarena.bigdata.cloudnote" />
		<property name="annotationClass"
			value="com.tarena.bigdata.cloudnote.dao.MyBatisRepository" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	

	
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- 定义aspectj -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- production环境 -->
	<beans profile="production">
		<context:property-placeholder
			ignore-resource-not-found="true" location="classpath*:/application.properties" />
		<!-- 数据源配置,使用C3P0 JDBC连接池 -->
		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
			destroy-method="close">
			<!-- Connection Info -->
			<property name="driverClass" value="${driverClass}"></property>
			<property name="jdbcUrl" value="${url}"></property>
			<property name="user" value="${user}"></property>
			<property name="password" value="${password}"></property>

			<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。 -->
			<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>
			<!--当连接池最小连接数 -->
			<property name="minPoolSize" value="${c3p0.minPoolSize}"></property>
			<!--当连接池最大连接数 -->
			<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>
			<!--初始化是创建连接个数，取值应在minPoolSize与maxPoolSize之间。 -->
			<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>
			<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 -->
			<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>
			<!--两次连接中间隔时间，单位毫秒。 -->
			<property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}"></property>
			<!--定义在从数据库获取新连接失败后重复尝试的次数。 -->
			<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"></property>
			<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。 但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。 
				如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。 -->
			<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"></property>
		</bean>

	</beans>

	<!-- local development环境 -->
	<beans profile="development">
		<context:property-placeholder
			ignore-resource-not-found="true"
			location="classpath*:/application.development.properties" />

		<bean id="dataSource"
			class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
			<property name="driverClass" value="${driverClass}" />
			<property name="url" value="${url}" />
			<property name="username" value="${mysql_username}" />
			<property name="password" value="${mysql_password}" />
		</bean>

	</beans>

	<!-- unit test环境 -->
	<beans profile="test">
		<context:property-placeholder
			ignore-resource-not-found="true" location="classpath*:/application.test.properties" />

		<!-- Spring Simple连接池 -->
		<bean id="dataSource"
			class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
			<property name="driverClass" value="${driverClass}" />
			<property name="url" value="${url}" />
			<property name="username" value="${mysql_username}" />
			<property name="password" value="${mysql_password}" />
		</bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />  
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />  
		<!-- 初始化数据结构与默认数据 -->
<!-- 		<jdbc:initialize-database data-source="dataSource"
			ignore-failures="ALL">
			<jdbc:script location="classpath:sql/mysql/schema.sql" />
			<jdbc:script location="classpath:data/mysql/import-data.sql"
				encoding="UTF-8" />
		</jdbc:initialize-database> -->

	</beans>
</beans>